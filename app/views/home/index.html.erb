<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="/assets/home.scss">
    </head>

    <body>
        <header>
            <div class="containerOfContents">
                <div class="profileOfUser">
                    <% if user_signed_in? %>
                        <div class="contentOfProfile">
                            <!--<div class="name"><%= current_user.email %></div>-->
                            <%= button_to "OUT", destroy_user_session_path, class:"buttonOfSignout", method: :delete, form: { data: { turbo: :false } } %>
                        </div> 
                    <% end %>
                </div>
                <div class="buttonOfToss">
                    <div class="contentsOfButton">
                        <span class="textOfEffect">#</span>
                        <span>findyourfuturecompany </span>
                        <img src="/assets/imagesOfTitle2.png"/>
                    </div>
                </div>
            </div>
        </header>
        <article>

            <div class="description"> 
                <span>퓨처컴퍼니팀에서 원하는 회사 정보를 빠르게 얻어보세요!</span>
            </div>

            <div class="containerOfInput">
                <form>
                    <div class="boxOfFirst">
                        <!-- <span>💼</span> -->
                        <p>첫 번째 지망 회사</p>
                        <input type="text" id="inputOfFirst" value="" placeholder="취뽀합시다 취뽀 🔥"/>
                        <ul class="resultOfFirst">
                        </ul>

                    </div>
                    <div class="boxOfTwice">
                        <p>2지망 회사</p>
                        <input type="text" id="inputOfTwice" value=""/>
                        <p class="resultOfTwice"> - </p>
                    </div>
                </form>
            </div>
            </div>
        </article>
        <div class="dataOfCompany">
        </div>
    </body>
    
    <script>

        const inputOfFirst = document.querySelector("#inputOfFirst");
        const inputOfTwice = document.querySelector("#inputOfTwice");

        const button = document.querySelector("#buttonOfSubmit");
        const nameOfCompany = Array.from(document.getElementsByClassName("nameOfCompany"));

        const resultOfFirst = document.querySelector(".resultOfFirst");
        const resultOfTwice = document.querySelector(".resultOfTwice");
        let companyInfo = []
        let companyData = []               

        // 깃 액션으로 크롤링 해온 데이터를 Fetch 메소드를 통해 호출하는 함수입니다.
        async function getCompanyInfo() {
            const data = await fetch('https://raw.githubusercontent.com/klmhyeonwoo/-findyourfuturecompany/develop/companyInfo/news.json')
            .then((res) => res.json())
            const scaledData = await data;
            for (let i in scaledData) {
                companyInfo.push(
                    {
                        "name" : i,
                        "content" : data[i]
                    }
                )
            }
            return companyInfo
        }

        // 노드를 추가해주는 함수입니다.
        function addNode(companyData, inputUser) { 
            const companyBox = document.createElement('li');
            const colorText = document.createElement('span')
            colorText.classList.add("colorText");
            colorText.innerHTML = inputUser
            const noneText = document.createElement('span')
            noneText.innerHTML = companyData.slice(inputUser.length,)
            companyBox.append(colorText, noneText)
            resultOfFirst.append(companyBox);
        }

        // INPUT에서 받아온 배열의 중복 값을 없앤 가공된 배열과, 사용자의 입력을 매칭해줍니다.
        function scaledCompanyInfo(array, inputOfUser) {
            if (array.length >= 2) {
                if (inputOfUser.length >= 1) {
                    array.map((company) => {
                        if (company.includes(inputOfUser)) {
                            company = company.replace('㈜', "");
                            if (company.indexOf(inputOfUser) === 0) {
                                addNode(company, inputOfUser)
                            }
                        }
                    })
                }
            }
        }

        // 사용자가 입력을 다 하고 Node를 초기화 해주는 함수입니다.
        function removeNode(item) {
            const parent = document.querySelector(".resultOfFirst");
            parent.innerHTML = ""
        }

        // 사용자의 입력 값과 매칭되는 배열을 companyData 배열에 새롭게 추가를 해줍니다.
        function checkOfItem(newValue) {
                // 사용자가 입력한 값과 매칭되는 회사 정보를 배열 정보에 넣어줍니다.
                getCompanyInfo()
                .then(
                    (data) => data.map((item) => {
                        companyData.push(item["name"])
                }))
            return companyData
        }

        inputOfFirst.addEventListener("input", function(event) { 
            let dataOfInput = checkOfItem(event.target.value);
            dataOfInput = dataOfInput.filter((element, index) => {
                return dataOfInput.indexOf(element) === index
            })
            removeNode()
            scaledCompanyInfo(dataOfInput, event.target.value);
            companyInfo = []
        })

        inputOfTwice.addEventListener("input", function(event) {
            if (event.target.value === "안녕") { 
                const companyBox = document.createElement('div');
                companyBox.innerHTML = "test"
                document.body.append(event.target.value);
            }

        })
        
        function init() {
        }

        init();
    </script>
</html>