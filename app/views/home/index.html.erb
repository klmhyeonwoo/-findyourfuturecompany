<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="/assets/home.scss">
    </head>

    <body>
        <header>
            <div class="containerOfContents">
            <!--
                <div class="profileOfUser">
                    <% if user_signed_in? %>
                        <div class="contentOfProfile">
                            <div class="name"><%= current_user.email %></div>
                            <%= button_to "OUT", destroy_user_session_path, class:"buttonOfSignout", method: :delete, form: { data: { turbo: :false } } %>
                        </div> 
                    <% end %>
                </div>
            -->
                <div class="buttonOfToss">
                    <div class="contentsOfButton">
                        <span class="textOfEffect">#</span>
                        <span>findyourfuturecompany </span>
                        <img src="/assets/imagesOfTitle2.png"/>
                    </div>
                </div>
            </div>
        </header>
        <article>

            <div class="description"> 
                <span>퓨처컴퍼니팀에서 원하는 기업별 공채 소식을 빠르게 관리해보세요</span>
                <!--
                <iframe id="pageFrame" name="pageFrame" src="http://www.jobkorea.co.kr/Starter/calendar/sub/month" frameborder="0"
                width="900px" height="1000px" scrolling="auto"></iframe>
                -->
            </div>

                <div class="containerOfInput">
                    <form class="searchOfCompany" onsubmit="return false;">
                        <div class="boxOfFirst">
                            <!-- <span>💼</span> -->
                            <p>희망 회사를 입력하고 쉽게 관리해보세요</p>
                            <input type="text" id="inputOfFirst" value="" placeholder="ex) 퓨처컴퍼니 팀"/>
                            <ul class="resultOfFirst">
                            </ul>
                        </div>
                        <div class="submitOfToss">희망회사 제출하기</div>
                    </form>
                    <form class="detailOfCompany">
                        <div class="boxOfTwice">
                            <p>회사명</p>
                            <input type="text" id="nameOfCompany" value="카카오모빌리티" placeholder="ex) 퓨처컴퍼니 팀" readonly/>
                            <p>채용 상태</p>
                            <input type="text" id="stateOfCompany" value="진행중" placeholder="ex) 퓨처컴퍼니 팀" readonly/>
                            <p>채용 기간</p>
                            <input type="text" id="planOfCompany" value="11/07~11/21" placeholder="ex) 퓨처컴퍼니 팀" readonly/>
                            <p>채용 내용</p>
                            <input type="text" id="contentOfCompany" value="카카오모빌리티 신입/경력 개발 공채" placeholder="ex) 퓨처컴퍼니 팀" readonly/>
                            <p>채용 경력</p>
                            <input type="text" id="careerOfCompany" value="신입·경력" placeholder="ex) 퓨처컴퍼니 팀" readonly/>
                        </div>
                        <div class="test">
                        <!-- TODO: 잠깐 취소 버튼을 보류하고, 수정할 부분이에요-->
                            <div class="fancy-button">
                                <div class="left-frills frills"></div>
                                <div class="button">
                                    <img src="/assets/return.png"/>
                                </div>
                                <div class="right-frills frills"></div>
                            </div>
                            <div type="submit" class="submitOfToss" id="final_submit">희망회사 최종 제출하기</div>
                            <!-- <div class="fancy-button2">
                                <div class="left-frills frills"></div>
                                <div class="button">
                                    <img src="/assets/return.png"/>
                                </div>
                                <div class="right-frills frills"></div>
                            </div>-->
                        </div>
                    </form>
                    <div class="svg">
                        <svg class="checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52"> 
                            <circle class="checkmark__circle" cx="26" cy="26" r="25" fill="none"/> 
                            <path class="checkmark__check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8"/>
                        </svg>
                    </div>
                </div>
            </div>
        </article>
        <div class="dataOfCompany">
        </div>
    </body>
    
    <script>

        // 회사가 마감된 경우 이전 화면으로 돌아가기 위해 취소 버튼 DOM을 지정해줍니다.
        const returnBtn = document.querySelector(".fancy-button");
        // 회사 공고에 대한 이동 버튼을 만들어주기 위해 DOM을 지정해줍니다.
        // const returnBtn2 = document.querySelector(".fancy-button2");

        // 회사 명을 입력하는 사용자의 value 값을 추적하기 위해 DOM을 지정해줍니다.
        const inputOfFirst = document.querySelector("#inputOfFirst"); 

        // 회사 상세 정보 <form>의 display 속성을 변동시키기 위해 DOM을 지정해줍니다.       
        const detailOfCompany = document.querySelector(".detailOfCompany");
        const searchOfCompany = document.querySelector(".searchOfCompany");
        const btn = document.querySelector(".submitOfToss");
        const btn2 = document.querySelector("#final_submit");

        // 회사 상제 정보 각 요소에 대한 DOM 요소를 선택해줍니다.
        const nameOfCompany = document.querySelector("#nameOfCompany");
        const stateOfCompany = document.querySelector("#stateOfCompany");
        const planOfCompany = document.querySelector("#planOfCompany");
        const contentOfCompany = document.querySelector("#contentOfCompany");
        const careerOfCompany = document.querySelector("#careerOfCompany");

        // 회사 상세 정보를 최종 제출할 경우, SVG 화면을 뛰우기 위해 DOM을 지정해줍니다.
        const svg = document.querySelector(".svg");

        // <ul>태그 안에 <li> 태그를 넣어주기 위해 부모 요소의 DOM를 지정해줍니다
        const resultOfFirst = document.querySelector(".resultOfFirst");
        // 회사 정보들을 담을 배열을 만들어줍니다
        let companyInfo = []
        let companyData = []           

        // 깃 액션으로 크롤링 해온 데이터를 Fetch 메소드를 통해 호출하는 함수입니다.
        async function getCompanyInfo() {
            const data = await fetch('https://raw.githubusercontent.com/klmhyeonwoo/-findyourfuturecompany/develop/companyInfo/news.json')
            .then((res) => res.json())
            const scaledData = await data;
            for (let i in scaledData) {
                companyInfo.push(
                    {
                        "name" : i,
                        "content" : data[i]
                    }
                )
            }
            return companyInfo
        }

        // 노드를 추가해주는 함수입니다.
        function addNode(companyData, inputUser) { 
            const companyBox = document.createElement('li');
            const colorText = document.createElement('span')
            colorText.classList.add("colorText");
            colorText.innerHTML = inputUser
            const noneText = document.createElement('span')
            noneText.innerHTML = companyData.slice(inputUser.length,)
            companyBox.append(colorText, noneText)
            resultOfFirst.append(companyBox);
        }

        // 회사를 검색하고 해당 회사 (1개의 회사)에 대한 정보를 가져와주는 함수입니다.
        function provideCompanyInfo(company) {
            // 오늘의 날짜를 가져오는 변수를 만들었어요 (month의 경우 1을 더해줘야해요)
            let month = new Date().getMonth() + 1;
            let today = new Date().getDate();   
            console.log(today);

            // map 함수를 통해 해당 회사에 대한 정보를 찾고, 이를 객체 형태로 리턴해주는 함수입니다.
            getCompanyInfo()
                .then(
                    (data) => data.map((item) => {
                        if (item["name"].includes(company)) {
                            if (item["name"][0].includes('㈜')) {    
                                nameOfCompany.value = item["name"].replace('㈜', '')
                                let startMonth = parseInt(item["content"]["plan"].split('~')[0].split('/')[0]);
                                let startPlan = parseInt(item["content"]["plan"].split('~')[0].split('/')[1]);
                                let lastPlan = parseInt(item["content"]["plan"].split('~')[1].split('/')[1]);
                                    // 시작 일정이 오늘 일자보다 앞이라면 예정을 출력해요
                                    if (month === startMonth && startPlan > today ) {
                                        stateOfCompany.value = `채용 예정 (${(startPlan-today)}일 남았어요)`;
                                    // 시작 일정보다 오늘 날자가 크거나 같고, 끝나는 일정보다 오늘 날자가 작거나 같으면 진행중이에요
                                    } else if (startPlan <= today) {
                                        if (lastPlan >= today) {
                                        stateOfCompany.value = `채용 진행 (${(lastPlan-today)}일 남았어요)`;
                                        }
                                    }
                                    // 위에 해당 되지 않는 다면 마감해요
                                    else {
                                        stateOfCompany.value = `마감`;
                                        btn2.innerText = "마감된 회사예요"
                                        btn2.style.opacity = "70%";
                                        btn2.style.disabled = true;
                                    }
                                    
                                planOfCompany.value = item["content"]["plan"]                                    
                                contentOfCompany.value = item["content"]["content"]
                                careerOfCompany.value = item["content"]["position"]
                                return ;
                            } else {
                                nameOfCompany.value = item["name"]
                                let startMonth = parseInt(item["content"]["plan"].split('~')[0].split('/')[0]);
                                let startPlan = parseInt(item["content"]["plan"].split('~')[0].split('/')[1]);
                                let lastPlan = parseInt(item["content"]["plan"].split('~')[1].split('/')[1]);    
                                // 시작 일정이 오늘 일자보다 앞이라면 예정을 출력해요
                                if (month === startMonth && startPlan > today ) {
                                    stateOfCompany.value = `채용 예정 (${(startPlan-today)}일 남았어요)`;
                                    // 시작 일정보다 오늘 날자가 크거나 같고, 끝나는 일정보다 오늘 날자가 작거나 같으면 진행중이에요
                                    } else if (startPlan <= today) {
                                        if (lastPlan >= today) {
                                        stateOfCompany.value = `채용 진행 (${(lastPlan-today)}일 남았어요)`;
                                        }
                                    }
                                    // 위에 해당 되지 않는 다면 마감해요
                                    else {
                                        stateOfCompany.value = `마감`;
                                        btn2.innerText = "마감된 회사예요"
                                        btn2.style.opacity = "70%";
                                        btn2.style.disabled = true;
                                    }                       
                                planOfCompany.value = item["content"]["plan"];
                                contentOfCompany.value = item["content"]["content"]
                                careerOfCompany.value = item["content"]["position"]
                                return ;
                            }
                        }
                }))
        }

        // INPUT에서 받아온 배열의 중복 값을 없앤 가공된 배열과, 사용자의 입력을 매칭해줍니다.
        function scaledCompanyInfo(array, inputOfUser) {
            if (array.length >= 2) {
                if (inputOfUser.length >= 1) {
                    array.map((company) => {
                        if (company.includes(inputOfUser)) {
                            company = company.replace('㈜', "");
                            if (company.indexOf(inputOfUser) === 0) {
                                addNode(company, inputOfUser)
                            }
                        }
                    })
                }
            }
        }

        // 사용자가 입력을 다 하고 Node를 초기화 해주는 함수입니다.
        function removeNode(item) {
            const parent = document.querySelector(".resultOfFirst");
            parent.innerHTML = ""
        }

        // 사용자의 입력 값과 매칭되는 배열을 companyData 배열에 새롭게 추가를 해줍니다.
        function checkOfItem(newValue) {
                // 사용자가 입력한 값과 매칭되는 회사 정보를 배열 정보에 넣어줍니다.
                getCompanyInfo()
                .then(
                    (data) => data.map((item) => {
                        companyData.push(item["name"])
                }))
            return companyData
        }
        
        function init() {
            // 회사 정보를 입력해주는 DOM에 input 이벤트를 추가시켜줍니다.
            inputOfFirst.addEventListener("input", function(event) { 
                let dataOfInput = checkOfItem(event.target.value);
                dataOfInput = dataOfInput.filter((element, index) => {
                    return dataOfInput.indexOf(element) === index
                })
                removeNode()
                scaledCompanyInfo(dataOfInput, event.target.value);
                companyInfo = []
            })

            // 기존 회사 입력 창의 display를 none 상태로 만들고, 회사 상세정보 <div>를 불러와요
            btn.addEventListener("click", function() {
                // 사용자의 입력과 회사 정보가 일치하는지에 대한 체크 변수를 선언합니다.
                let match = false;
                let sure = false;
                // <li> 태그에서 연관 회사 정보를 DOM의 innerText 값으로 불러옵니다.
                let keyword = document.getElementsByTagName('li');
                keyword = Array.from(keyword);

                keyword.map((item) => {
                    if (item.innerText === inputOfFirst.value) {
                        // 만약 <li> 태그에 해당하는 회사 명이 있을 경우에는 match 변수를 true로 만들어주고 keyword 값에 해당 회사명을 지정해줍니다.
                        match = true
                        keyword = item.innerText
                    }
                });

                // 기업 검색을 진행할 코드예요
                try {
                    if (match === true) {
                        if (confirm(`"${inputOfFirst.value}" 기업으로 검색을 진행할거예요, 진행할까요?`)) {
                            console.log("OK,," || "SORRY!")
                            sure = true;
                            // provideCompanyInfo 함수를 사용하여 DOM에 연결을 시켜줍니다.
                            provideCompanyInfo(inputOfFirst.value);
                        }
                    } else if (keyword[0].innerText.includes(inputOfFirst.value, 0)) {
                        if (confirm(`"${keyword[0].innerText}" 기업으로 검색을 진행할거에요, 진행할까요?`)) {
                            console.log("OK,," || "SORRY!");
                            sure = true;
                            // provideCompanyInfo 함수를 사용하여 DOM에 연결을 시켜줍니다.
                            provideCompanyInfo(keyword[0].innerText);
                        }
                    } else {
                        alert(`회사를 잘못 입력하셨거나 아직 채용공고가 없는 회사예요!`);
                    }

                    if (sure === true) {
                        detailOfCompany.style.display = "flex";
                        searchOfCompany.style.display = "none";
                        returnBtn.style.display = "none";
                        // returnBtn2.style.display = "none";

                        // 회사에 대한 상세 정보를 띄우고, 2초 뒤에 돌아가기 버튼을 띄어줘요
                        setTimeout(() => {
                            returnBtn.style.display = "flex";
                            $(".fancy-button").bind('animationend webkitAnimationEnd MSAnimationEnd oAnimationEnd', function(){
                            $(".fancy-button").removeClass('active');
                            })
                            $(".fancy-button").addClass("active");
                        }, 2000);

                        // 회사에 대한 상세 정보를 띄우고, 2초 뒤에 돌아가기 버튼을 띄어줘요
                        // setTimeout(() => {
                        //     returnBtn2.style.display = "flex";
                        //     $(".fancy-button2").bind('animationend webkitAnimationEnd MSAnimationEnd oAnimationEnd', function(){
                        //     $(".fancy-button2").removeClass('active');
                        //     })
                        //     $(".fancy-button2").addClass("active");
                        // }, 2000);

                    } else {
                        alert("괜찮아요, 다시 입력해주세요!");
                        inputOfFirst.value = "";
                        removeNode();
                    }

                    
                }
                // 예외처리는 다 여기서 처리를 할거예요
                catch(e) {
                    console.log(e);
                    alert(`회사를 잘못 입력하셨거나 아직 채용공고가 없는 회사예요,\n채용공고가 있는 회사들은 아래 키워드로 알려드려요!`);
                    inputOfFirst.value = "";
                }
            })

            // 상세 화면에서 최종 제출을 누르면 SVG 애니메이션을 생성 시키고 마이 페이지로 이동을 시켜요
            btn2.addEventListener("click", function() {
                detailOfCompany.style.display = "none";
                svg.style.display = "flex";
            })

            // return 버튼을 클릭할 경우에 기존 <li> 노드와 기존 회사명의 빈 값을 넣어주고, 다시 첫 화면의 display를 불러와요
            returnBtn.addEventListener("click", function() {
                detailOfCompany.style.display = "none";
                searchOfCompany.style.display = "flex";
                inputOfFirst.value = "";
                btn2.innerText = "희망회사 최종 제출하기"
                btn2.style.opacity = "100%";
                btn2.style.disabled = false;      
                removeNode();          
            })
        }

        init();
    </script>
</html>